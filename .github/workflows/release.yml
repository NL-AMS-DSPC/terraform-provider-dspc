name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Setup GPG
        run: |
          # Create GPG directory with proper permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          # Configure GPG for CI environment - use simpler approach
          cat > ~/.gnupg/gpg.conf << 'EOF'
          batch
          yes
          no-tty
          use-agent
          pinentry-mode loopback
          EOF
          
          cat > ~/.gnupg/gpg-agent.conf << 'EOF'
          allow-loopback-pinentry
          pinentry-program /usr/bin/pinentry-curses
          default-cache-ttl 600
          max-cache-ttl 7200
          EOF
          
          # Kill any existing GPG agent and restart
          gpgconf --kill gpg-agent 2>/dev/null || true
          gpg-connect-agent reloadagent /bye
          
          # Set GPG_TTY
          export GPG_TTY=$(tty || echo /dev/console)
          
          # Test GPG signing with explicit passphrase handling
          echo "test content" > test_file.txt
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --local-user "${{ secrets.GPG_FINGERPRINT }}" --detach-sign --armor --output test_file.txt.sig test_file.txt
          if [ -f test_file.txt.sig ]; then
            echo "GPG signing test successful"
            ls -la test_file.txt.sig
            rm test_file.txt test_file.txt.sig
          else
            echo "GPG signing test failed"
            exit 1
          fi
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
          GPG_TTY: /dev/console